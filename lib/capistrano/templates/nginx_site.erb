upstream unicorn_<%= fetch :application %> {
	server unix:/tmp/unicorn.<%= fetch :application %>.sock fail_timeout=0;
}
			
server{
	
#<%= fetch(:rails_env) %>
#<%= fetch(:rails_env) == :production %>	
<% if fetch(:rails_env) == :production %>
    listen 443 ssl;	
    server_name birthday.su-m37.co.kr birthday.su-m37.com;
	ssl_certificate /etc/ssl/certs/<%= fetch :nginx_ssl_certificate %>;
	ssl_certificate_key /etc/ssl/private/<%= fetch :nginx_ssl_certificate_key %>;
<% else %>
    listen 443 ssl;	
    server_name bday.mnv.kr;
	ssl_certificate /etc/ssl/certs/<%= fetch :nginx_staging_ssl_certificate %>;
	ssl_certificate_key /etc/ssl/private/<%= fetch :nginx_staging_ssl_certificate_key %>;
<% end %>
	ssl_session_timeout 5m;
	ssl_protocols SSLv2 SSLv3 TLSv1;
	ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
	ssl_prefer_server_ciphers on;

	# if ($ssl_protocol = "") {
	# 		rewrite ^/(.*) https://$server_name/$1 permanent;
	# 	}

	try_files $uri/index.html $uri @unicorn_<%= fetch :application %>;
	location @unicorn_<%= fetch :application %> {
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto https;
		proxy_set_header Host $http_host;
		proxy_redirect off;
		proxy_pass http://unicorn_<%= fetch :application %>;
	}
	root <%= current_path %>/public;
	location ~ ^/assets/ {
		gzip_static on;
		expires max;
		add_header Cache-Control public;
	}
	error_log  /var/log/nginx/error.<%= fetch :application %>.log;
	access_log	/var/log/nginx/access.<%= fetch :application %>.log;
	client_max_body_size 100M;
	charset     utf-8;  
}
server{
    listen 80;
    <% if fetch(:rails_env) == :production %>
    server_name birthday.su-m37.co.kr birthday.su-m37.com;
    <% else %>
    server_name bday.mnv.kr;
    <% end %>
    rewrite ^/(.*) https://$server_name/$1 permanent;
}